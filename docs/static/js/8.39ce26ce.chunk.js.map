{"version":3,"sources":["views/Scroll.tsx","site/pages/scroll/index.js"],"names":["DistanceStatus","_attr","startPageY","distanceStatus","DONE","freshAble","freshDistance","loadDistance","domHeight","Scroll","props","refScrollArea","refScrollDom","useState","scrollTip","setScrollTip","transform","transition","freshAreaStyle","setScrollAreaStyle","freshBoxClassName","className","useEffect","offsetHeight","hideScrollTip","ref","ele","style","onTouchStart","val","freshHandler","EMPTY","touches","pageY","scrollTop","onTouchMove","event","distanceY","HALF","computedScrollSatus","onTouchEnd","setTimeout","loadHandler","areaHeight","getHasNeedLoad","children","TestContent","Array","num","fill","map","idx","key","TestReFresh","setNum"],"mappings":"kHAYKA,E,kCAAAA,O,iBAAAA,I,eAAAA,I,gBAAAA,M,KAML,IAAMC,EAAQ,CACZC,WAAY,EACZC,eAAgBH,EAAeI,KAC/BC,WAAW,EACXC,cAAe,GACfC,aAAc,GACdC,UAAW,GAGE,SAASC,EAAOC,GAAuB,IAIhDC,EACAC,EAL+C,EACjBC,mBAAS,IADQ,mBAC5CC,EAD4C,KACjCC,EADiC,OAENF,mBAAS,CAACG,UAAW,GAAIC,WAAY,KAF/B,mBAE5CC,EAF4C,KAE5BC,EAF4B,KAO/CC,EAAiB,yBAAqBV,EAAMW,WAAa,IAG7DC,qBAAU,WACRrB,EAAMO,UAAYI,EAAaW,gBAGjC,IA4BMC,EAAgB,WACpBvB,EAAME,eAAiBH,EAAeI,KACtCe,EAAmB,CACjBH,UAAU,sBACVC,WAAY,oBAgDhB,OAAO,yBAAKI,UAAWD,GAEnB,yBACEK,IAAK,SAAAC,GAAG,OAAIf,EAAgBe,GAC5BL,UAAU,kBACVM,MAAOT,EACPU,aAlDoB,SAACC,GACS,oBAAvBnB,EAAMoB,cACfX,EAAmB,CACjBH,UAAU,GACVC,WAAY,KAEdhB,EAAME,eAAiBH,EAAe+B,MACtC9B,EAAMC,WAAa2B,EAAIG,QAAQ,GAAGC,MAClChC,EAAMI,UAAyC,IAA5BM,EAAcuB,WAEjCjC,EAAMI,WAAY,GAyChB8B,YArCmB,SAACC,GACxBnC,EAAMI,WA5CoB,SAAC+B,GAC3B,IAEMC,GAFWD,EAAMJ,QAAQ,GAAGC,MACfhC,EAAMC,YACmB,EAExCmC,EAAY,IACdlB,EAAmB,CACjBH,UAAU,gBAAD,OAAkBqB,EAAY,GAA9B,OACTpB,WAAY,KAEVoB,EAAYpC,EAAMK,eACpBL,EAAME,eAAiBH,EAAeI,KACtCW,EAAa,8BAEbd,EAAME,eAAiBH,EAAesC,KACtCvB,EAAa,8BA6BEwB,CAAoBH,IAqCnCI,WAlCkB,WAEtB,GAAIvC,EAAME,iBAAmBH,EAAeI,MACV,oBAAvBM,EAAMoB,aASf,OARAX,EAAmB,CACjBH,UAAU,kBACVC,WAAY,iBAEdF,EAAa,0BAEbL,EAAMoB,oBACNW,YAAW,kBAAMjB,MAAiB,KAIjCvB,EAAME,iBAAmBH,EAAesC,KAKV,oBAAtB5B,EAAMgC,aA1EI,WACrB,IAAMC,EAAahC,EAAcY,aAC3BW,EAAYvB,EAAcuB,UAEhC,OADoBjC,EAAMO,WAAaP,EAAMM,aAAeoC,EAAaT,EAwEvEU,IAAoBlC,EAAMgC,cAL1BlB,MAqBE,yBAAKH,UAAU,kBAAkBP,GAEjC,yBAAKW,IAAK,SAAAC,GAAG,OAAId,EAAec,GAAKL,UAAU,cAC5CX,EAAMmC,YCnIjB,SAASC,EAAYpC,GACjB,OAAOqC,MAAMrC,EAAMsC,KAAKC,KAAK,GAAGC,KAAI,SAACrB,EAAKsB,GACtC,OAAO,yBAAK9B,UAAU,eAAe+B,IAAKD,GAAMA,EAAM,EAA/C,6DAwBAE,UApBf,WAAwB,IAAD,EAEGxC,mBAAS,IAFZ,mBAEZmC,EAFY,KAEPM,EAFO,KAYnB,OAAO,kBAAC7C,EAAD,CACHY,UAAU,aACVS,aAViB,WACjBwB,EAAO,KAUPZ,YAPgB,WAChBY,EAAON,EAAM,MAOb,kBAACF,EAAD,CAAaE,IAAKA","file":"static/js/8.39ce26ce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface ReScrollProps {\n  className?: String, // 刷新组件的 支持添加className\n  freshDistance?: number, // 触发刷新需要的：下拉距离\n  loadDistance?: number, // 触发加载需要的：距离最底部距离\n  freshHandler: Function | undefined, // 刷新执行的函数\n  loadHandler: Function | undefined // 加载执行的函数\n  children?: React.ReactNode\n}\n\n// 刷新距离状态 的枚举值\nenum DistanceStatus {\n  'EMPTY',\n  'HALF',\n  'DONE'\n}\n\nconst _attr = {\n  startPageY: 0,\n  distanceStatus: DistanceStatus.DONE,\n  freshAble: false,\n  freshDistance: 90, // \n  loadDistance: 60,\n  domHeight: 0\n}\n\nexport default function Scroll(props: ReScrollProps) {\n  const [scrollTip, setScrollTip] = useState('');\n  const [freshAreaStyle, setScrollAreaStyle] = useState({transform: '', transition: ''});\n\n  let refScrollArea: HTMLDivElement | any;\n  let refScrollDom: HTMLDivElement | any;\n\n  let freshBoxClassName = `zui-scroll-box ${props.className || ''}`;\n  \n  // 副作用处理\n  useEffect(() => {\n    _attr.domHeight = refScrollDom.offsetHeight;\n  })\n\n  const getHasNeedLoad = (): boolean => {\n    const areaHeight = refScrollArea.offsetHeight;\n    const scrollTop = refScrollArea.scrollTop;\n    const isNeedLoad = (_attr.domHeight <= _attr.loadDistance + areaHeight + scrollTop);\n    return isNeedLoad;\n  }\n  \n  const computedScrollSatus = (event: React.TouchEvent<HTMLDivElement>): void => {\n    const curPageY = event.touches[0].pageY;\n    const startPageY = _attr.startPageY; // 小写\n    const distanceY = (curPageY - startPageY) / 2;\n    // 下拉动画\n    if (distanceY > 0) {\n      setScrollAreaStyle({\n        transform: `translate(0, ${distanceY - 50}px)`,\n        transition: ''\n      })\n      if (distanceY > _attr.freshDistance) {\n        _attr.distanceStatus = DistanceStatus.DONE;\n        setScrollTip('松开刷新');\n      } else {\n        _attr.distanceStatus = DistanceStatus.HALF;\n        setScrollTip('下拉刷新');\n      }\n    }\n  }\n  \n  // tip 隐藏（恢复原状）\n  const hideScrollTip = (): void => {\n    _attr.distanceStatus = DistanceStatus.DONE;\n    setScrollAreaStyle({\n      transform: `translate(0, -50px)`,\n      transition: 'transform 0.6s'\n    })\n  }\n\n  const touchStartHandler = (val: React.TouchEvent<HTMLDivElement>): void => {\n    if (typeof props.freshHandler === 'function') {\n      setScrollAreaStyle({\n        transform: ``,\n        transition: ''\n      })\n      _attr.distanceStatus = DistanceStatus.EMPTY;\n      _attr.startPageY = val.touches[0].pageY;\n      _attr.freshAble = (refScrollArea.scrollTop === 0);\n    } else {\n      _attr.freshAble = false;\n    }\n  }\n\n  const touchMoveHandler = (event: React.TouchEvent<HTMLDivElement>): void => {\n    _attr.freshAble && computedScrollSatus(event);\n  }\n\n  const touchEndHandler = (): void => {\n    // 需要刷新的时候执行 传入的刷新方法\n    if (_attr.distanceStatus === DistanceStatus.DONE &&\n        typeof props.freshHandler === 'function') {\n      setScrollAreaStyle({\n        transform: `translate(0, 0)`,\n        transition: 'transform 3s'\n      })\n      setScrollTip('刷新中 >>>');\n\n      props.freshHandler();\n      setTimeout(() => hideScrollTip(), 300);\n      return;\n    }\n    \n    if(_attr.distanceStatus === DistanceStatus.HALF) {\n      hideScrollTip()\n      return;\n    }\n\n    if (typeof props.loadHandler === 'function') {\n      getHasNeedLoad() && props.loadHandler();\n      return;\n    }\n  }\n\n  return <div className={freshBoxClassName}>\n      {/* 滚动区域 */}\n      <div\n        ref={ele => refScrollArea = ele}\n        className=\"zui-scroll-area\"\n        style={freshAreaStyle}\n        onTouchStart={touchStartHandler}\n        onTouchMove={touchMoveHandler}\n        onTouchEnd={touchEndHandler}\n      >\n        {/* 刷新tip */}\n        <div className=\"zui-scroll-tip\">{scrollTip}</div>\n        {/* 真正的内容 */}\n        <div ref={ele => refScrollDom = ele} className=\"zui-scroll\">\n          {props.children}\n        </div>\n      </div>\n    </div>\n}\n","import React, { useState } from 'react';\n\nimport Scroll from '../../../views/Scroll'\n\nfunction TestContent(props) {\n    return Array(props.num).fill(0).map((val, idx) => {\n        return <div className=\"test-content\" key={idx}>{idx + 1}：需用手机模式测试</div>\n    })\n}\n\nfunction TestReFresh() {\n\n    const [num, setNum] = useState(50);\n\n    const freshHandler = () => {\n        setNum(50)\n    }\n\n    const loadHandler = () => {\n        setNum(num + 30);\n    }\n\n    return <Scroll\n        className=\"test-fresh\"\n        freshHandler={freshHandler}\n        loadHandler={loadHandler}>\n        <TestContent num={num}></TestContent>\n    </Scroll>\n}\n\nexport default TestReFresh;"],"sourceRoot":""}