{"version":3,"sources":["views/sub-views/PickerCol.tsx","views/Picker.tsx","views/PickerView.tsx","site/pages/picker/index.js","views/Transition.tsx","views/Sheet.tsx"],"names":["PickerCol","list","value","onChange","useState","index","findIndex","val","translateY","transition","initState","colStyle","setColStyle","curTouchY","setCurTouchY","className","onTouchStart","e","touches","pageY","onTouchMove","stopPropagation","preventDefault","onTouchEnd","adjustTranslate","adjustTranIdx","maxIdx","length","curTransLateY","maxTranslate","curPickIdx","Math","abs","round","getFinallyTranslate","style","transform","map","item","key","label","Picker","data","values","pickValues","setValues","colChangeHandler","idx","pickIdx","oldState","splice","pickerClassName","PickerView","props","indexes","pickObj","setValue","Sheet","ensureHandler","onEnsure","button","Button","TestPicker","values1","setValues1","values2","setValues2","textAlign","margin","console","log","Transition","name","isShow","children","time","initName","transitionName","setName","isConShow","setConShow","useEffect","setTimeout","React","Children","child","childTs","cloneElement","setIsShow","closeSheet","onClick","header","titleTxt"],"mappings":"0IAce,SAASA,EAAT,GAA6D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAA2B,EAGvCC,oBAAS,kBAGzC,SAAoBH,EAAkBC,GAClC,IAAIG,EAAQJ,EAAKK,WAAU,SAAAC,GAAG,OAAIA,EAAIL,QAAUA,KAEhD,MAAO,CACHM,YAdQ,IAYZH,GAAmB,IAAXA,EAAe,EAAIA,GAGvBI,WAAY,QAR2BC,CAAUT,EAAMC,MAHQ,mBAGhES,EAHgE,KAGtDC,EAHsD,OAIrCR,mBAAS,GAJ4B,mBAIhES,EAJgE,KAIrDC,EAJqD,KA+DvE,OAAO,yBAAKC,UAAU,kBAClB,yBACIA,UAAU,sBACVC,aA9BqB,SAACC,GAC1BH,EAAaG,EAAEC,QAAQ,GAAGC,QA8BtBC,YA3BoB,SAACH,GACzBA,EAAEI,kBACFJ,EAAEK,iBACF,IAAMd,EAAaS,EAAEC,QAAQ,GAAGC,MAAQN,EACxCC,EAAaG,EAAEC,QAAQ,GAAGC,OAC1BP,EAAY,CACRJ,WAAYA,EAAaG,EAASH,WAClCC,WAAY,UAqBZc,WAjBmB,SAACN,GAAmC,IAAD,EApClC,WACxB,IAAIO,EAAiBC,EACfC,EAASzB,EAAK0B,OAAS,EACvBC,EAAgBjB,EAASH,WACzBqB,EAvBM,IAuBWH,EAEvB,GAAIE,EAAgB,EAChBJ,EAAkB,EAClBC,EAAgB,OACb,GAAIG,EAAgBC,EACvBL,EAAkBK,EAClBJ,EAAgBC,MACb,CACH,IAAMI,EAAaC,KAAKC,IAAID,KAAKE,MAAML,EAhC/B,KAiCRJ,EAjCQ,IAiCYM,EACpBL,EAAgBK,EAGpB,MAAO,CAAEL,gBAAeD,mBAmBmBU,GAAnCT,EADkD,EAClDA,cAAeD,EADmC,EACnCA,gBACjBtB,EAAQD,EAAKwB,GAAevB,MACV,oBAAbC,GACPA,EAASD,GAEbU,EAAY,CACRJ,WAAYgB,EACZf,WAAY,gBAWhB,yBACIM,UAAU,sBACVoB,MAAO,CACH1B,WAAYE,EAASF,WACrB2B,UAAU,cAAD,OAAgBzB,EAASH,WAAzB,SAGTP,EAAKoC,KAAI,SAAAC,GAAI,OAAG,yBAAKvB,UAAU,kBAC3BwB,IAAKD,EAAKpC,OAAQoC,EAAKE,YC/C5BC,MAjCf,YAAmE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,OAAQ5B,EAAmC,EAAnCA,UAAWZ,EAAwB,EAAxBA,SAAwB,EAE9BC,mBAAS,CAAC,GAAI,KAFgB,mBAEvDwC,EAFuD,KAE3CC,EAF2C,KAWxDC,EAAmB,SAACC,GAAD,OAAiB,SAAC7C,EAAe8C,GACtDH,GAAU,SAACI,GAEP,OADAA,EAASC,OAAOH,EAAK,EAAG7C,GACjB+C,KAEX9C,GAAYA,EAASyC,KAGnBO,EAAe,qBAAiBpC,GAAa,IAEnD,OAAO,yBAAKA,UAAWoC,GAEfT,EAAKL,KAAI,SAACpC,EAAM8C,GAAP,OAAe,kBAAC/C,EAAD,CACpBuC,IAAKQ,EACL7C,MAAOyC,EAAOI,GACd9C,KAAMA,EACNE,SAAU2C,EAAiBC,U,gBCQ5BK,MA7Bf,SAAoBC,GAAyB,IAAD,EAEZjD,mBAAS,CAACuC,OAAQ,GAAIW,QAAS,KAFnB,mBAEjCC,EAFiC,KAExBC,EAFwB,KAiBxC,OAAO,kBAACC,EAAA,EAAD,CACHC,cAdkB,WACY,oBAAnBL,EAAMM,UACbN,EAAMM,SAASJ,EAAQZ,OAAQY,EAAQD,UAa3CM,OAAQ,kBAACC,EAAA,EAAD,4BACR,kBAAC,EAAD,CACI9C,UAAU,kBACV2B,KAAMW,EAAMX,KACZC,OAAQU,EAAMV,OACdxC,SAdc,SAACwC,EAAuBW,GAC1CE,EAAS,CAAEb,SAAQW,YACW,oBAAnBD,EAAMlD,UACbkD,EAAMlD,SAASwC,EAAQW,QC1B7BZ,EAAO,CACT,CACI,CACIxC,MAAO,IACPsC,MAAO,SACT,CACEtC,MAAO,IACPsC,MAAO,SACT,CACEtC,MAAO,IACPsC,MAAO,SACT,CACEtC,MAAO,IACPsC,MAAO,SACT,CACEtC,MAAO,IACPsC,MAAO,UAEZ,CACC,CACItC,MAAO,KACPsC,MAAO,iBACT,CACEtC,MAAO,KACPsC,MAAO,iBACT,CACEtC,MAAO,KACPsC,MAAO,iBACT,CACEtC,MAAO,KACPsC,MAAO,iBACT,CACEtC,MAAO,KACPsC,MAAO,mBA8CJsB,UAxCI,WAAO,IAAD,EAES1D,mBAAS,CAAC,IAAK,OAFxB,mBAEd2D,EAFc,KAELC,EAFK,OAGS5D,mBAAS,CAAC,IAAK,OAHxB,mBAGd6D,EAHc,KAGLC,EAHK,KAoBrB,OAAO,6BACH,yBAAK/B,MAAO,CAACgC,UAAW,SAAUC,OAAQ,WACtC,oEACA,0EAEJ,kBAAC,EAAD,CACI1B,KAAMA,EACNC,OAAQoB,EACR5D,SAtBc,SAACwC,GACnBqB,EAAWrB,GACX0B,QAAQC,IAAI3B,MAsBZ,6BACA,kBAAC,EAAD,CACID,KAAMA,EACNC,OAAQsB,EACR9D,SAvBe,SAACwC,GACpBuB,EAAWvB,GACX0B,QAAQC,IAAI3B,IAsBRgB,SAnBc,SAAChB,GACnB0B,QAAQC,IAAI3B,S,4DCpDL,SAAS4B,EAAT,GAA4E,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,SAAwC,IAA9BC,YAA8B,MAAvB,IAAuB,EAEhFC,EAAWJ,GAAQ,GAF6D,EAIpDpE,mBAAS,IAJ2C,mBAI/EyE,EAJ+E,KAI/DC,EAJ+D,OAKtD1E,oBAAS,GAL6C,mBAK/E2E,EAL+E,KAKpEC,EALoE,KA+BtF,OAxBAC,qBAAU,WAON,OANIR,IACAO,GAAW,GACXE,YAAW,WACPJ,EAAQ,GAAD,OAAIF,EAAJ,WACR,KAEA,YAEEG,GAAaN,IACdK,EAAQ,GAAD,OAAIF,EAAJ,UAEPM,YAAW,WACPF,GAAW,GACXF,EAAQ,MACTH,OAOZ,CAACF,IAEG,oCAECM,EACII,IAAMC,SAAS/C,IAAIqC,GAAU,SAACW,GAC1B,IAAMC,EAAUD,EAChB,OAAOF,IAAMI,aAAaD,EACtB,CACIvE,UAAU,GAAD,OAAMuE,EAAQjC,MAAMtC,UAApB,YAAiC8D,QAKpD,MCxCF,SAASpB,EAAMJ,GAAoB,IAAD,EAClBjD,oBAAS,GADS,mBACvCqE,EADuC,KAC/Be,EAD+B,KAOxCC,EAAa,WACfD,GAAU,IAad,OAAO,oCACH,yBAAKE,QAAS,kBAAMF,GAAU,KAAQnC,EAAMO,QAC5C,kBAACW,EAAD,CAAYC,KAAK,YAAYC,OAAQA,GACjC,yBAAK1D,UAAU,iBACX,yBAAKA,UAAU,iBAAiB2E,QAtBvB,WACjBF,GAAU,MAuBF,yBAAKzE,UAAU,kBAGPsC,EAAMsC,OACFtC,EAAMsC,OACN,yBAAK5E,UAAU,oBACX,yBAAK2E,QAASD,GAAd,gBACA,6BAAMpC,EAAMuC,UAAY,IACxB,yBAAKF,QAxBZ,SAACzE,GAElBA,EAAEI,kBACiC,oBAAxBgC,EAAMK,eACbL,EAAMK,gBAEV+B,MAkBwB,iBAIZ,yBACI1E,UAAU,kBACZsC,EAAMqB,c","file":"static/js/4.211df65e.chunk.js","sourcesContent":["import React, { useState, TouchEvent } from 'react';\n\ninterface PickerColProps {\n    list: Array<any>,\n    value: ValueType,\n    onChange?: Function\n}\n\ntype ValueType = string | number\n\nconst LINE_HEIGHT = 26;\n\n// 写在function中的非useState的属性是不能被动态获取的\n// 可以写在function外部\nexport default function PickerCol({list, value, onChange}: PickerColProps) {\n\n    // useState init时 需要传入函数，否则每次set都会执行\n    const [colStyle, setColStyle] = useState(() => initState(list, value))\n    const [curTouchY, setCurTouchY] = useState(0);\n\n    function initState (list: Array<any>, value: ValueType): {translateY: number, transition: string} {\n        let index = list.findIndex(val => val.value === value);\n        index = index === -1 ? 0 : index;\n        return {\n            translateY: - (index * LINE_HEIGHT),\n            transition: 'none',\n        }\n    }\n\n    const getFinallyTranslate = () => {\n        let adjustTranslate, adjustTranIdx;\n        const maxIdx = list.length - 1;\n        const curTransLateY = colStyle.translateY;\n        const maxTranslate = - maxIdx * LINE_HEIGHT;\n\n        if (curTransLateY > 0) {\n            adjustTranslate = 0;\n            adjustTranIdx = 0;\n        } else if (curTransLateY < maxTranslate) {\n            adjustTranslate = maxTranslate;\n            adjustTranIdx = maxIdx;\n        } else {\n            const curPickIdx = Math.abs(Math.round(curTransLateY / LINE_HEIGHT));\n            adjustTranslate = - curPickIdx * LINE_HEIGHT;\n            adjustTranIdx = curPickIdx;\n        }\n\n        return { adjustTranIdx, adjustTranslate };\n    }\n\n    const colTouchStartHandler = (e: TouchEvent<HTMLDivElement>) => {\n        setCurTouchY(e.touches[0].pageY);\n    }\n\n    const colTouchMoveHandler = (e: TouchEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const translateY = e.touches[0].pageY - curTouchY;\n        setCurTouchY(e.touches[0].pageY);\n        setColStyle({\n            translateY: translateY + colStyle.translateY,\n            transition: 'none'\n        })\n    }\n\n    const colTouchEndHandler = (e: TouchEvent<HTMLDivElement>) => {\n        const { adjustTranIdx, adjustTranslate } = getFinallyTranslate();\n        const value = list[adjustTranIdx].value;\n        if (typeof onChange === 'function') {\n            onChange(value)\n        }\n        setColStyle({\n            translateY: adjustTranslate,\n            transition: 'all 0.3s'\n        })\n    }\n\n    return <div className=\"zui-picker-col\">\n        <div\n            className=\"zui-picker-col-mask\"\n            onTouchStart={colTouchStartHandler}\n            onTouchMove={colTouchMoveHandler}\n            onTouchEnd={colTouchEndHandler}>\n        </div>\n        <div\n            className=\"zui-picker-col-area\"\n            style={{\n                transition: colStyle.transition,\n                transform: `translateY(${colStyle.translateY}px)`,\n            }}>\n            {\n                list.map(item=> <div className=\"zui-picker-item\"\n                    key={item.value}>{item.label}</div>)\n            }\n        </div>\n    </div>\n}","import React, { useState } from 'react';\nimport PickerCol from './sub-views/PickerCol';\n\n// import { typeCheck } from '../utils/base';\n\nexport interface PickerProps {\n    data: Array<Array<{[key: string]: string}>>,\n    values: Array<string | number>,\n    className?: string,\n    onChange?: Function\n}\n\nfunction Picker({data, values, className, onChange}: PickerProps) {\n\n    const [pickValues, setValues] = useState(['', '']);\n\n    // if (typeCheck([\n    //     ['data', data, 'Array'],\n    //     ['values', values, 'Array'],\n    //     ['className', className, 'String', 'Undefined', 'Null'],\n    //     ['onChange', onChange, 'Function', 'Undefined', 'Null']\n    // ])) return null;\n\n    const colChangeHandler = (idx: number) => (value: string, pickIdx: number) => {\n        setValues((oldState) => {\n            oldState.splice(idx, 1, value);\n            return oldState;\n        })\n        onChange && onChange(pickValues);\n    }\n\n    const pickerClassName = `zui-picker ${className || ''}`\n\n    return <div className={pickerClassName}>\n        {\n            data.map((list, idx) => <PickerCol\n                key={idx}\n                value={values[idx]}\n                list={list}\n                onChange={colChangeHandler(idx)}\n            ></PickerCol>)\n        }\n    </div>\n}\n\nexport default Picker;","import React, { useState } from 'react';\n\nimport Sheet from './Sheet';\nimport Button from './Button';\nimport Picker from './Picker'\n\ninterface PickerViewProps {\n    data: Array<Array<{[key: string]: string}>>,\n    values: Array<string | number>,\n    onChange?: Function,\n    onEnsure?: Function\n}\n\ninterface GlobalAttr {\n    values: Array<string>,\n    indexes: Array<number>\n}\n\nfunction PickerView(props: PickerViewProps) {\n\n    const [pickObj, setValue] = useState({values: [], indexes: []} as GlobalAttr);\n\n    const ensureHandler = () => {\n        if (typeof props.onEnsure === 'function') {\n            props.onEnsure(pickObj.values, pickObj.indexes)\n        }\n    }\n\n    const changeHandler = (values: Array<string>, indexes: Array<number>) => {\n        setValue({ values, indexes });\n        if (typeof props.onChange === 'function') {\n            props.onChange(values, indexes)\n        }\n    }\n\n    return <Sheet\n        ensureHandler={ensureHandler}\n        button={<Button>弹出Picker</Button>}>\n        <Picker\n            className=\"zui-picker-view\"\n            data={props.data}\n            values={props.values}\n            onChange={changeHandler}\n        ></Picker>\n    </Sheet>\n}\n\nexport default PickerView;","import React, { useState } from 'react';\n\nimport Picker from '../../../views/Picker';\nimport PickerView from '../../../views/PickerView';\n\nconst data = [\n    [\n        {\n            value: '1',\n            label: 'test1'\n        },{\n            value: '2',\n            label: 'test2'\n        },{\n            value: '3',\n            label: 'test3'\n        },{\n            value: '4',\n            label: 'test4'\n        },{\n            value: '5',\n            label: 'test5'\n        },\n    ], [\n        {\n            value: '11',\n            label: '测试1'\n        },{\n            value: '22',\n            label: '测试2'\n        },{\n            value: '33',\n            label: '测试3'\n        },{\n            value: '44',\n            label: '测试4'\n        },{\n            value: '55',\n            label: '测试5'\n        },\n    ]\n]\n\n\nconst TestPicker = () => {\n\n    const [values1, setValues1] = useState(['2', '44']);\n    const [values2, setValues2] = useState(['3', '22']);\n\n\n    const changeHandler = (values) => {\n        setValues1(values);\n        console.log(values);\n    }\n\n    const changeHandler2 = (values) => {\n        setValues2(values);\n        console.log(values);\n    }\n\n    const ensureHandler = (values) => {\n        console.log(values);\n    }\n\n    return <div>\n        <div style={{textAlign: 'center', margin: '33px 0'}}>\n            <p>使用了 touch 事件</p>\n            <p>需使用手机模式</p>\n        </div>\n        <Picker\n            data={data}\n            values={values1}\n            onChange={changeHandler}>\n        </Picker>\n        <br></br>\n        <PickerView\n            data={data}\n            values={values2}\n            onChange={changeHandler2}\n            onEnsure={ensureHandler}>\n        </PickerView>\n    </div>\n}\n\nexport default TestPicker;","import React, {useState, useEffect} from 'react';\n\ninterface TransitionProps {\n    name: string,\n    isShow: boolean,\n    children: React.ReactNode,\n    time?: number\n}\n\nexport default function Transition({name, isShow, children, time = 300}: TransitionProps) {\n\n    const initName = name || '';\n\n    const [transitionName, setName] = useState('');\n    const [isConShow, setConShow] = useState(false);\n\n    useEffect(() => {\n        if (isShow) {\n            setConShow(true);\n            setTimeout(() => {\n                setName(`${initName}--in`);\n            }, 34); // 下两帧\n        }\n        return () => {\n            // 当销毁时 设置 class 为 out\n            if (!isConShow && isShow) {\n                setName(`${initName}--out`);\n                // 正常关闭\n                setTimeout(() => {\n                    setConShow(false);\n                    setName('');\n                }, time);\n                // TODO\n                // 也可以通过 transitionEnd 来计算结束时间\n                // 但是如果没有设置动画效果那么怎么办？\n                // 如何判断是否有动画效果？\n            }\n        }\n    }, [isShow])\n\n    return <>\n        {\n            isConShow ?\n                React.Children.map(children, (child) => {\n                    const childTs = child as React.DetailedReactHTMLElement<any, HTMLElement>;\n                    return React.cloneElement(childTs,\n                        {\n                            className:  `${childTs.props.className} ${transitionName}`,\n                        },\n                        // children // 外包裹\n                    )\n                })\n                : null\n        }\n    </>\n}\n","import React, { useState, ReactNode, MouseEvent } from 'react';\nimport Transition from './Transition';\n\ninterface SheetProps {\n    children: ReactNode,\n    button: ReactNode, // 触发Sheet的按钮\n    header?: ReactNode,\n    titleTxt?: string,\n    canModalClose?: boolean,\n    ensureHandler?: Function\n}\n\nexport default  function Sheet(props: SheetProps) {\n    const [isShow, setIsShow] = useState(false);\n\n    const modalHandler = () => {\n        setIsShow(false);\n    }\n\n    const closeSheet = () => {\n        setIsShow(false);\n    }\n\n    const clickHandler = (e: MouseEvent<HTMLElement>): void => {\n        // e.cancelBubble = true; // 阻止冒泡\n        e.stopPropagation(); // 阻止冒泡\n        if (typeof props.ensureHandler === 'function') {\n            props.ensureHandler();\n        }\n        closeSheet();\n    }\n\n    \n    return <>\n        <div onClick={() => setIsShow(true)}>{props.button}</div>\n        <Transition name=\"zui-sheet\" isShow={isShow}>\n            <div className='zui-sheet-box'>\n                <div className=\"zui-sheet-mask\" onClick={modalHandler}></div>\n                {/* sheet主体 */}\n                <div className=\"zui-sheet-area\">\n                    {/* 头部信息 */}\n                    {\n                        props.header ?\n                            props.header :\n                            <div className=\"zui-sheet-header\">\n                                <div onClick={closeSheet}>取消</div>\n                                <div>{props.titleTxt || ''}</div>\n                                <div onClick={clickHandler}>确定</div>\n                            </div>\n                    }\n                    {/* 内容部分 */}\n                    <div\n                        className=\"zui-sheet-body\"\n                    >{props.children}</div>\n                </div>\n            </div>\n        </Transition>\n    </>\n}\n"],"sourceRoot":""}